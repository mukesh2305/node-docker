# this file is shared file for both development and production environment
# if your dev and prod environment are different, you not need to create this file
version: '3'
services:
  nginx:
    image: nginx:stable-alpine
    ports:
      - "3000:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro

  node-app:
    build: .
    # ports:
    #   - "3000:3000"
    environment:
      - PORT=3000
    depends_on:
      - mongo

  mongo:
    image: mongo
    # ports:
    #   - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
      # - MONGO_INITDB_DATABASE=node-app
    volumes:
      - mongo-db:/data/db

  redis:
    image: redis
    # ports:  
    #   - "6379:6379"
    # environment:
    #   - REDIS_PASSWORD=root
    # volumes:
    #   - redis-db:/data/db

volumes:
  mongo-db:

    # -------------- development environment --------------
    # docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
    # docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build 
    # docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d node-app // then it also start mongo container  and node-app container because node-app container is depens on mongo container 

    #  // if we want to remove mongo dependency from node-app container , we can use --no-deps option
    # docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --no-deps node-app
    # docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build --no-deps node-app
    # docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build -V


    # neginx ------------------------------------
    # docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --scale nginx=2




    # docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v
    # docker-compose -f docker-compose.yml -f docker-compose.dev.yml down   // use this command and after use "docker volume prune" => it will remove unused volumes
    # -------------- producation environment --------------
    # docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
    # docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build
    # docker-compose -f docker-compose.yml -f docker-compose.prod.yml down -v

    # now don't use -v because it remove all the volumes in the docker-compose.yml file
    # but we have remove unused volumes it also remove mongo-db volume so this remove database so we dont't have to remove database
    # use below command when you have to remove unused volumes
    #  => docker volume prune 

    # docker-compose -f docker-compose.yml -f docker-compose.prod.yml down 
    # -------------------------------------------------------------------------
    # mongo -u "root" -p "root"
    # docker exec -it learning-mongo-1 mongo -u "root" -p "root"
    # ------------------------------------------------
    # docker inspect learning-node-app-1
    # docker inspect learning-mongo-1
    # docker logs learning-node-app-1
    # docker network ls

    # --------------------------------------
    # docker logs learning-node-app-1 -f  // it runs logs same as  "npm start"
    # docker network inspect learnong_default 

    # ------------------------------------------------------

